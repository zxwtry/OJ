package comm

import "math/rand"

import "fmt"

import "strings"

import "strconv"

func ChiGetRatio(n int) {
	if n < 1 {
		return
	}
	avg := float64(1) / float64(n)
	sum := float64(0)
	l := make([]float64, 0, n)
	for i := 0; i < n-1; i++ {
		vv := ((rand.Float64() - 0.5) * 0.1) * avg
		sum += avg + vv
		l = append(l, avg+vv)
	}
	l = append(l, float64(1)-sum)
	for _, v := range l {
		fmt.Printf("%.5f\n", v)
	}

}

type ChiSolveExcelStruct struct {
	CityName   string
	OriginData []float64
	ToOneData  []float64
	Value      float64
	PositionX  float64
	PositionY  float64
	CXTR_Value float64
	CXHJ_Value float64
	CXCC_Value float64
	QYXT_Value float64
}

func ChiSolveExcel() {

	val2018 := `广州	深圳	珠海	佛山	惠州	东莞	中山	江门	肇庆	澳门	香港	指标权重
113.27	114.05	113.57	113.12	114.42	113.75	113.38	113.08	112.47	113.33	114.08	0
23.13	22.55	22.27	23.02	23.12	23.05	22.52	22.58	23.05	22.13	22.2	0
134214.24	298410.79	27053.27	69887.52	22859.16	9166.12	40172.24	90457.03	25331.9	0	33576	0.05944
6001723.57	11619340.08	921527.34	2547698.6	626278.71	227220.06	941936.34	2363204.92	611184.08	0	2204730	0.06141
2.63	4.8	3.16	2.56	2.16	1.03	2.3	2.85	1.68	0	0.86	0.05979
11642	14120	2029	3901	1234	411	1086	5711	2359	0	310	0.05846
82	13	10	13	5	6	5	9	5	12	12	0.05838
237	25	9	9	4	13	5	7	8	0	0	0.05992
1636655	5549818	455217	546769	132816	69917	221734	393445	410488	0	2204730	0.05627
6.53	12.96	7.95	6.78	3.51	2.21	4.07	5.14	9.37	0	0	0.0568
1000	3369.54	245	567.76	263	372.69	250	230	48.69	0	0	0.05645
8778953	27692700	1985782	1026124.73	2643138	1690730.606	3813100	3650139	3975140.73	851200	0	0.05765
9810	9751	386	342	374	11	33	272	242	0	0	0.05891
7193802.46	5769330	408966.51	74652.69	96464.51	2087.97	31906.37	183248.01	33954.2	0	0	0.06067
50169	69970	13139	29709	4089	2146	5222	24674	8165	0	16777	0.05714
10797	21310	3452	5058	712	294	1445	6716	1875	0	10414	0.05812
8986.75	23871.71	2712.01	9634.22	2130.21	942.39	4178.55	11957.86	2809.77	0	25844	0.05775
2648	886	334	598	168	426	265	293	91	0	0	0.05864
80527.63	35632.08	5926.23	7814.77	3657.56	9889.53	4062.86	6020.22	1516.37	0	0	0.06418`

	val2017 := `广州	深圳	珠海	佛山	惠州	东莞	中山	江门	肇庆	澳门	香港	指标权重
113.27	114.05	113.57	113.12	114.42	113.75	113.38	113.08	112.47	113.33	114.08	0
23.13	22.55	22.27	23.02	23.12	23.05	22.52	22.58	23.05	22.13	22.2	0
118010.4	196397.6	17362.1	59048.8	15456.7	7933.4	31349.6	55585.8	28046.3	0	32355	0.05944
5324084.63	9769376.76	671525.51	2231550.8	514318.75	242265.32	839794.54	1881418.66	791708.36	0	1915236	0.06141
2.48	4.34	2.51	2.37	1.91	1.15	2.19	2.48	2.31	0	0.8	0.05979
8678	10973	1463	2531	730	288	786	4026	1704	0	261	0.05846
82	12	10	13	4	6	5	9	5	12	12	0.05838
237	25	9	9	4	13	5	7	8	0	0	0.05992
1712569	3518252	453039	462621	110216	58617	258472	339579	476000	0	1915236	0.05627
7.83	7.66	9.17	5.97	3.36	2.16	4.67	5.09	10.46	0	0	0.0568
817.54	2695.63	196	454.2	210.4	298.15	200.3	184.68	38.95	0	0	0.05645
7560250	16455500	1084784	842860.99	1288557	841808	2037300	3351900	2112832.18	766080	0	0.05765
6612	9048	386	328	295	33	42	252	135	0	0	0.05891
3575124.52	5550932.51	99712.43	26706.44	46975.64	3178.87	27777.79	94186.15	13395.85	0	0	0.06067
36941	60258	7769	25899	5687	1848	8184	20402	7808	0	13992	0.05714
9345	18928	2479	4901	589	188	1469	4969	1493	0	7253	0.05812
8548.08	21378.78	2324.58	10271.47	1923.72	1213.48	4781.62	9318.05	2805.21	0	22902	0.05775
2118	708	267	478	134	340	212	234	72	0	0	0.05864
64422.1	28505.66	4740.98	6251.81	2926.04	7911.62	3250.28	4816.17	1213.09	0	0	0.06418`

	val2016 := `广州	深圳	珠海	佛山	惠州	东莞	中山	江门	肇庆	澳门	香港	指标权重
113.27	114.05	113.57	113.12	114.42	113.75	113.38	113.08	112.47	113.33	114.08	0
23.13	22.55	22.27	23.02	23.12	23.05	22.52	22.58	23.05	22.13	22.2	0
110227.94	179016.39	13370.07	49270.12	12401.26	9673.62	28141.54	53924.63	27805.5	0	31282	0.05944
4574578.2	8429692.8	552277.5	2003890.4	430255.3	220150.2	698804.1	1648344.3	759672.4	0	1774179	0.06141
2.34	4.32	2.48	2.32	1.78	1.06	2.05	2.41	2.37	0	0.79	0.05979
6942	8778	1170	2024	584	230	628	3220	1363	0	209	0.05846
82	12	10	3	4	6	4	9	5	12	12	0.05838
237	25	9	9	4	13	5	7	8	0	0	0.05992
1129546	4035240	352358	349559	94638	42231	218192	279373	278828	0	1774179	0.05627
5.81	9.58	8.45	5.02	3.23	1.7	4.29	4.66	7.59	0	0	0.0568
613.57	2156.50	156.8	363.36	168.32	238.52	160.16	147.2	31.17	0	0	0.05645
6489220	17150200	1396870	4502854.48	1660173	1151881	2454200	2951300	1309134.43	689472	0	0.05765
9831	512	67	2	1	7	1	106	141	0	0	0.05891
2896080.95	4687371.13	159121.12	28298.49	35308.18	12091.19	12147.55	20141.35	7248.9	0	0	0.06067
31850	56336	7642	18273	3244	931	6363	17024	7597	0	14854	0.05714
7668	17666	1796	3348	544	210	1242	3682	1207	0	6183	0.05812
9109.85	19222.06	2430.61	10513.85	1551.83	1409.12	4602	6971.03	3376.17	0	20739	0.05775
1694	567	213	382	107	272	169	187	58	0	0	0.05864
51537.68	22804.53	3792.78	5001.45	2340.83	6329.29	2600.23	3852.94	970.47	0	0	0.06418`

	val2015 := `广州	深圳	珠海	佛山	惠州	东莞	中山	江门	肇庆	澳门	香港	指标权重
113.27	114.05	113.57	113.12	114.42	113.75	113.38	113.08	112.47	113.33	114.08	0
23.13	22.55	22.27	23.02	23.12	23.05	22.52	22.58	23.05	22.13	22.2	0
122197.95	152172.72	13646.55	52665.67	13951.15	9296.59	19390.45	50307.78	29339.01	0	30110	0.05944
3801282.37	7323850.54	534162.8	1957269.03	403493.6	196715.81	638066.46	1478838.32	709813.6	0	1644363	0.06141
2.1	4.18	2.64	2.45	1.8	1	2.03	2.36	2.36	0	0.76	0.05979
5553	7022	936	1619	467	184	503	2576	1090	0	171	0.05846
81	12	10	3	4	6	4	8	4	12	12	0.05838
237	25	9	9	4	13	5	7	8	0	0	0.05992
886688	2143182	286324	302739	79850	49802	197946	308338	165573	0	1644363	0.05627
5.13	6.09	7.36	3.78	2.73	1.86	4.07	5.3	4.66	0	0	0.0568
512.3	1725.2	125.44	290.69	134.66	190.82	128.27	117.76	24.93	0	0	0.05645
5400082	10403200	912213	2828749.57	1021786	698069.02	1418300	2489800	1566430	620524.8	0	0.05765
5880	10289	497	287	1	8	34	182	74	0	0	0.05891
2694838.15	3721549.71	154069.74	15103.82	8	1028.63	7059	12856.54	8185.2	0	0	0.06067
20071	40032	4420	11507	2438	494	4600	11166	4867	0	12914	0.05714
6619	16957	1240	2150	508	165	868	2795	992	0	6458	0.05812
7287.88	15377.64	1944.48	8411.08	1241.46	1127.29	3681.6	5576.82	2700.93	0	19812	0.05775
1355	453	171	306	86	218	135	150	46	0	0	0.05864
41230.14	18243.62	3034.22	4001.16	1872.67	5063.43	2080.18	3082.35	776.38	0	0	0.06418`

	val := `广州	深圳	珠海	佛山	惠州	东莞	中山	江门	肇庆	澳门	香港	指标权重
113.27	114.05	113.57	113.12	114.42	113.75	113.38	113.08	112.47	113.33	114.08	0
23.13	22.55	22.27	23.02	23.12	23.05	22.52	22.58	23.05	22.13	22.2	0
134214.24	298410.79	27053.27	69887.52	40172.24	90457.03	25331.9	22859.16	9166.12	0	29846	0.05614
600.17	1161.93	92.15	254.77	94.19	236.32	61.12	62.63	22.72	0	237.32	0.058
2.63	4.8	3.16	2.56	2.3	2.85	1.68	2.16	1.03	0	0.8	0.05647
11746	14416	2041	3949	1105	5791	2380	1241	410	0	0	0.05521
82	13	10	13	5	9	5	4	6	12	12	0.05514
237	25	9	9	4	13	5	7	8	0	0	0.05659
163.67	554.98	45.52	54.68	22.17	39.34	41.05	13.28	6.99	0	17.45	0.05314
6.53	12.96	7.95	6.78	4.07	5.14	9.37	3.51	2.21	0	0.6	0.05365
1000	3369.54	245	567.76	263	372.69	250	230	48.69	0	0	0.05332
877.9	2769.27	198.58	686.93	381.31	365.01	397.51	264.31	169.07	85.12	0	0.05445
9810	9751	386	342	33	272	242	374	11	0	0	0.05564
719.38	576.93	40.9	7.47	3.19	18.32	3.4	9.65	0.21	0	0	0.0573
10797	21310	3452	5058	1445	6716	1875	712	294	0	7253	0.05397
50169	69970	13139	29709	5222	24674	8165	4089	2146	0	13992	0.05489
2793.05	1523.5	1247.04	1242.01	1542.57	3924.44	349.65	425.86	129.16	0	0	0.05454
8986.75	23871.71	2712.01	9634.22	4178.55	11957.86	2809.77	2130.21	942.39	0	0	0.05538
2648	886	334	598	168	426	265	293	91	0	0	0.05435
8.05	3.56	0.59	0.78	0.37	0.99	0.41	0.6	0.15	0	0	0.06182`

	fmt.Printf("val2015:%d\n", len(val2015))
	fmt.Printf("val2016:%d\n", len(val2016))
	fmt.Printf("val2017:%d\n", len(val2017))
	fmt.Printf("val2018:%d\n", len(val2018))
	fmt.Printf("val:%d\n\n\n", len(val))
	arrVal := strings.Split(val2017, "\n")
	/*
			2015:1
		2016:1.193
		2017:1.513
		2018:1.861
	*/
	ratio := 1.513
	arrValF := make([][]float64, 0, 10)
	arrToOneF := make([][]float64, 0, 10)
	arrVV := make([]float64, 0, 10)
	for ii, strVal := range arrVal {
		arrStrVal := strings.Split(strVal, "\t")
		arrValFOne := make([]float64, 0, len(arrStrVal))
		arrToOneFOne := make([]float64, 0, len(arrStrVal))
		arrVVOne := make([]float64, 0, 10)
		sum := 0.0
		for index, strStrVal := range arrStrVal {
			strStrValF, strStrValFErr := strconv.ParseFloat(strStrVal, 64)
			if strStrValFErr != nil {
				fmt.Println(strStrValFErr)
			}
			arrValFOne = append(arrValFOne, strStrValF)
			if index != len(arrStrVal)-1 {
				sum += strStrValF
			}
		}
		for _, vv := range arrValFOne {
			if ii > 2 {
				arrToOneFOne = append(arrToOneFOne, ratio*vv/sum)
				arrVVOne = append(arrVVOne, vv)
			} else {
				arrToOneFOne = append(arrToOneFOne, vv/sum)
				arrVVOne = append(arrVVOne, vv)
			}
		}

		arrValF = append(arrValF, arrValFOne)
		arrToOneF = append(arrToOneF, arrToOneFOne)
		arrVV = append(arrVV, sum)
	}
	cityArr := strings.Split(arrVal[0], "\t")
	cityList := make([]ChiSolveExcelStruct, len(arrValF[0])-1, len(arrValF[0])-1)

	fmt.Println(arrVV)

	// 经度max
	xMax := arrValF[1][0]
	xMin := arrValF[1][0]
	for cityIndex := 0; cityIndex < len(cityList); cityIndex++ {
		if xMax < arrValF[1][cityIndex] {
			xMax = arrValF[1][cityIndex]
		}
		if xMin > arrValF[1][cityIndex] {
			xMin = arrValF[1][cityIndex]
		}
	}
	// 纬度min
	yMax := arrValF[2][0]
	yMin := arrValF[2][0]
	for cityIndex := 0; cityIndex < len(cityList); cityIndex++ {
		if yMax < arrValF[2][cityIndex] {
			yMax = arrValF[2][cityIndex]
		}
		if yMin > arrValF[2][cityIndex] {
			yMin = arrValF[2][cityIndex]
		}
	}

	cityStructList := make([]ChiSolveExcelStruct, 0, 10)
	for cityIndex := 0; cityIndex < len(cityList); cityIndex++ {
		originData := make([]float64, len(arrVal)-3, len(arrVal)-3)
		toOneData := make([]float64, len(arrVal)-3, len(arrVal)-3)
		value := 0.0
		for rowIndex := 3; rowIndex < len(arrVal); rowIndex++ {
			originData[rowIndex-3] = arrValF[rowIndex][cityIndex]
			toOneData[rowIndex-3] = arrToOneF[rowIndex][cityIndex]
			value += arrToOneF[rowIndex][cityIndex] * arrValF[rowIndex][len(arrValF[0])-1]
		}
		cityStruct := ChiSolveExcelStruct{
			CityName:   cityArr[cityIndex],
			OriginData: originData,
			ToOneData:  toOneData,
			Value:      value,
			PositionX:  0.5 + (arrValF[1][cityIndex]-xMin)/(xMax-xMin)*4,
			PositionY:  0.5 + (arrValF[2][cityIndex]-yMin)/(yMax-yMin)*4,
		}
		for rowIndex := 3; rowIndex <= 8; rowIndex++ {
			cityStruct.CXTR_Value += arrToOneF[rowIndex][cityIndex] * arrValF[rowIndex][len(arrValF[0])-1]

		}
		for rowIndex := 9; rowIndex <= 12; rowIndex++ {
			cityStruct.CXHJ_Value += arrToOneF[rowIndex][cityIndex] * arrValF[rowIndex][len(arrValF[0])-1]
		}
		for rowIndex := 13; rowIndex <= 17; rowIndex++ {
			cityStruct.CXCC_Value += arrToOneF[rowIndex][cityIndex] * arrValF[rowIndex][len(arrValF[0])-1]
		}
		for rowIndex := 18; rowIndex <= 19; rowIndex++ {
			cityStruct.QYXT_Value += arrToOneF[rowIndex][cityIndex] * arrValF[rowIndex][len(arrValF[0])-1]
		}
		// fmt.Println(cityStruct)
		// fmt.Printf("%s\t\t(%.1f,%.1f)\t\t%.5f\n", cityStruct.CityName, cityStruct.PositionX, cityStruct.PositionY, cityStruct.Value)
		cityStructList = append(cityStructList, cityStruct)

	}

	for rowIndex := 3; rowIndex <= 19; rowIndex++ {

	}

	fmt.Printf("最佳值: %.2f %.2f\n", 0.5+(113.93-xMin)/(xMax-xMin)*4, 0.5+(22.56-yMin)/(yMax-yMin)*4)

	for j := 0; j < len(cityStructList); j++ {
		fmt.Printf("%s ", cityStructList[j].CityName)
	}
	fmt.Println()
	for i := 0; i < len(cityStructList[0].ToOneData); i++ {
		fmt.Printf("X%d,", (i + 1))
		for j := 0; j < len(cityStructList); j++ {
			fmt.Printf("%.5f,", cityStructList[j].ToOneData[i]*arrValF[i+3][len(arrValF[0])-1])
		}
		fmt.Println()
	}
	fmt.Printf(",")
	for j := 0; j < len(cityStructList); j++ {
		fmt.Printf("%.5f,", cityStructList[j].Value)
	}
	fmt.Println()
	// 计算每个栏目归一值
	for j := 0; j < len(cityStructList); j++ {
		fmt.Printf("%.1f %.1f %.5f\n", cityStructList[j].PositionX, cityStructList[j].PositionY, cityStructList[j].Value)
	}

	for j := 0; j < len(cityStructList); j++ {
		c := cityStructList[j]
		fmt.Printf("%s,%.5f,%.5f,%.5f,%.5f\n", c.CityName, c.CXTR_Value, c.CXHJ_Value, c.CXCC_Value, c.QYXT_Value)
	}
}

func ChiGetSum() {
	sum2018 := []float64{751128.27, 2.8064843699999996e+07, 24.03, 42803, 172, 317, 1.1621589e+07, 58.519999999999996, 6346.679999999999, 5.610700806599999e+07, 21221, 1.3794412719999999e+07, 224060, 62073, 93067.47, 5709, 155047.25}
	sum2017 := []float64{529190.7, 2.418127933e+07, 22.54, 31440, 170, 317, 9.304601e+06, 56.37000000000001, 5095.849999999999, 3.634187217e+07, 17131, 9.437990199999997e+06, 188788, 51614, 85466.99000000002, 4563, 124037.74999999997}
	sum2016 := []float64{483831.07, 2.10918442e+07, 21.92, 209, 159, 317, 8.554144e+06, 50.33, 1879.1000000000001, 3.9755304910000004e+07, 10668, 7.85780886e+06, 164114, 43546, 79925.52, 3649, 99230.19999999998}
	sum2015 := []float64{493077.87, 1.868785553e+07, 21.680000000000003, 20121, 156, 317, 6.064805e+06, 40.980000000000004, 3250.07, 2.735915439e+07, 17252, 6.61469879e+06, 112509, 38752, 67161.18, 2920, 79384.15}

	av15 := float64(0)
	av16 := float64(0)
	av17 := float64(0)
	av18 := float64(0)

	for i := 0; i < len(sum2015); i++ {
		av15 += sum2015[i] / sum2015[i]
		av16 += sum2016[i] / sum2015[i]
		av17 += sum2017[i] / sum2015[i]
		av18 += sum2018[i] / sum2015[i]
	}

	fmt.Printf("%.3f\n", av16/15)
	fmt.Printf("%.3f\n", av17/15)
	fmt.Printf("%.3f\n", av18/15)

}
